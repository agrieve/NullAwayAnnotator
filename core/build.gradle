/*
 * MIT License
 *
 * Copyright (c) 2020 Nima Karimipour
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
}

dependencies {

    implementation project(':injector')
    implementation project(':css')
    implementation deps.build.guava
    implementation deps.build.json
    implementation deps.build.progressbar
    implementation deps.build.javaparser
    implementation deps.build.commonscli
    testCompile deps.build.commonsio
}

configurations.implementation.canBeResolved = true

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    zip64 true
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': 'Main'
    }
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

fatJar.doLast{
    def oldName = 'core-1.3.0-SNAPSHOT.jar'
    def newName = 'core.jar'
    def oldPath = "$project.buildDir/libs/"+oldName
    def newPath = "$project.buildDir/libs/"+newName
    file( oldPath ).renameTo( file( newPath ) )
}
